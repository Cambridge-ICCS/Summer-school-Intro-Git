## What is a Git branch?

- A branch is a pointer to a commit, and updates as new commits are made.
- The work done so far has been on the `main` branch.
- Using multiple branches enable collaborative work in parallel without interfering with the changes of others.
![](images/git_branching_illustration.png)

## Creating a git branch:

![](images/creating_branch_and_checking_out.png){width=40%}

## Creating a git branch and checking it out

- Create a new branch using `git branch my-new-branch`
- Switch to the branch using `git switch my-new-branch`
- Or, more conveniently, we can combine these actions into one:
```bash
$ git switch -c my-new-branch
```

<br>

- Make a change in your new branch by editing new.txt and committing the changes.

<br>

::: {.callout-note}
Older versions of git may need to use `checkout (-b)` instead of `switch (-c)`
:::

## Switching and merging branches

- Return to the main branch:
```bash
$ git switch main
```
- Open the new.txt file, what's inside?

<br>

- Now merge the new branch into main:
```bash
$ git merge my-new-branch
```

<br>

::: {.callout-note}
You can use `git switch -` as a shortcut for returning to the previous branch.
:::

## Why and when to use branches?

*Feature branching*

```{mermaid}
%%{init: { 'theme': 'base',
  'gitGraph': { 'showCommitLabel': false, 'mainBranchOrder': 2, 'parallelCommits': true}
} }%%
gitGraph
    commit
    commit
    branch feature order: 1
    commit
    commit
    checkout main
    commit
    branch bugfix order: 3
    commit
    commit
    commit
    checkout feature
    commit
    checkout main
    merge feature
    merge bugfix
    commit
```

- Enables working on multiple tasks concurrently.
- Keeps non-working code out of the main branch.
- Can regularly commit smaller changes without worry.

::: {.fragment}
::: {.callout-tip}
Keep branches short-lived. Long branches with large changes become harder and harder to merge.
:::
:::
