## Ways of working with a remote repository

A remote repository is one stored in the cloud. We will be using GitHub to do this today. \
There are two different ways to copy a remote repository so that you can work on it locally:
<br>
<br>
- clone:  This makes a copy locally which is linked to the remote version.
Your local branches can be synced to branches in the original.
<br>
<br>
- fork: This makes another separate version of the repo remotely that you own. Once you
have forked a repo remotely, you can then clone it to your local machine. You can still contribute to the original repository through a pull request.
<br>
<br>

## To clone or to fork?

Use a clone when:

- You are collaborating directly and actively with the owner of the repo (e.g. it is your research team, or you)
OR all of the following is true:

- It is owned by someone else and you are happy not to have ownership of the codebase
- You have permission to push branches up to the repo
- You want easy access to the latest changes made by others to the central repository
- You want the main branch in the repo to be updated and edited by others working on the project


## To clone or to fork?

Use a fork when:

- The owner of the repo is not someone you are actively collaborating with
- You want to take the development of the code in a different direction from the original owner of the repo
- You want full ownership over your version of the codebase
- You want complete control over other's contributions to the codebase
- You do not want the main branch to receive updates from those editing the existing repo
- Or you do not have permission to push branches directly to the original repo


## Working with remote repositories

![](images/fork_vs_clone.png){width=50%}

## Collaborative git with GitHub

::: {.callout-warning}
You must have already created a GitHub account and connected your local git repo to it before you can do these exercises
:::

</br>

**Example repository:**

[https://github.com/Cambridge-ICCS/Summer-School-Intro-Git-Practice](https://github.com/Cambridge-ICCS/Summer-School-Intro-Git-Practice)

::: {.column-margin style="text-align: left;"}
{{< qrcode https://github.com/Cambridge-ICCS/Summer-School-Intro-Git-Practice qr7dekity9 width=200 height=200 >}}
:::


## Forking:


:::: {.columns}

::: {.column width="40%"}
![Github Fork option](images/Github%20fork.png)
:::

::: {.column width="60%"}
![Fork menu](images/Fork%20menu.png)
:::
Your forked repo only exists in GitHub. To work on it locally it needs to be copied ("cloned") to your local computer.

::::


## Cloning from GitHub

![](images/github_clone_menu.png){fig-align="center" width=50%}

```bash
$ git clone git@github.com:Cambridge-ICCS/Summer-School-Intro-Git-Practice.git
```

::: {.callout-warning}
Clone repo to a new working folder.

Do not clone into an existing local git repo.
:::

## Cloning from GitHub

::: {style="font-size: 90%;"}
- Choose/create a file to edit, and then `commit`. \
- Next `push` the changes up to the remote repo. \
- The first time you do this on a new branch, you will need to set up a remote one to track it: \
- `git push --set-upstream origin your-branch-name` \
- For any commits after that on the branch you can use `git push` on its own when you are on the branch you want to push.
:::

## Pull requests

The final step is to put in a pull request (PR) to the original repo that we forked from.
<br>
<br>
A pull request is how we signal to the repo owner that we want to merge in our changes.
<br>
<br>
Depending on the code and the repo, you may not be able to merge directly. \
<br>
-> Branches can be set up so that you can only merge after a review by one or more developers who may suggest/require edits to you code. \
<br>
-> Additionally, you can set up Continuous Integration so that the code has to pass tests before it can be merged.

