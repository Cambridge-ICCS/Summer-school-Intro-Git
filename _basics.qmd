## Motivation

:::: {.columns}
::: {.column width="60%"}
::: {style="margin-top: 3em;"}
- Relatable experience when writing your software/documents?

::: {.fragment}

::: {.callout-tip title="Version Control"}
Tools like Git and Github exist as solutions to the problem of how to save, share, and collaborate in a structured and safe way.

Useful whether you are working alone or in a team!
:::
:::
:::

:::

::: {.column width="40%"}
![]( http://www.phdcomics.com/comics/archive/phd101212s.gif ){.absolute top=10.5% right=0 width=38%}

:::

::::

::: {.attribution}
[Piled Higher and Depper](https://phdcomics.com/comics/archive.php?comicid=1531)
by [Jorge Cham](https://jorgecham.com)
:::


## What are Version Control Systems (VCSs)?

:::: {.columns}

::: {.column width="70%"}

::: {style="margin-top: 3em;"}
- Tools to track changes to code
- Maintain a history of changes as a series of *snapshots*
    - Allow to go back in time to a previous state
- Facilitate *collaboration*
- Require very little overhead for a huge benefit
:::

:::

::: {.column width="30%"}

![]( https://upload.wikimedia.org/wikipedia/commons/2/22/Apache_Subversion_logo.svg ){.absolute top=13.5% right=0% width=13%}
![]( https://git-scm.com/images/logos/downloads/Git-Logo-2Color.png ){.absolute top=35.5% right=0 width=19%}
![]( https://www.mercurial-scm.org/hg-logo/logo-droplets.svg ){.absolute bottom=25.5% right=0% width=11%}
:::


::::

::: {.attribution}
[Git](https://git-scm.com/images/logos/downloads/Git-Logo-2Color.png) by Jason Long under [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/)

[Subversion](https://upload.wikimedia.org/wikipedia/commons/2/22/Apache_Subversion_logo.svg) under [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0)

[Mercurial](https://www.mercurial-scm.org/hg-logo/logo-droplets.svg) under [GPLv2+](https://www.gnu.org/licenses/old-licenses/gpl-2.0.html)
:::

## Why Git?

:::: {.columns}

::: {.column width="60%"}
::: {style="margin-top: 1.5em;"}
- De facto standard for VC in the open source community
    - Git is open source itself!
    - Has a rich ecosystem around
- Distributed VC approach (vs centralized)
- Supports non-linear development (branching)
- Gives fine-grained control
- High performance/Scalable
:::
:::

::: {.column width="60%"}
![]( https://git-scm.com/images/logos/downloads/Git-Logo-2Color.png ){.absolute top=35.5% right=0 width=19%}
:::
::::
::: {.attribution}
[Git](https://git-scm.com/images/logos/downloads/Git-Logo-2Color.png) by Jason Long under [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/)
:::


## Github: Hosting and collaboration

![]( images/github-mark.svg ){.absolute top=30% right=0% width=13%}

::: {style="margin-top: 3em;"}
- Code hosting platform
- Most widely used to host open source software
- Eases the development with tools
    - Pull Requests (PRs)
    - Issues and Discussions
    - More advance features like Continuous Integration, Automated Testing
:::

## In today's course we will practice how to:


:::: {.columns}

::: {.column width="60%"}

::: {style="margin-top: 3em;"}
- create a local git repository
- create a git commit in your repository
- create a git branch in your repository
- fork a remote repository and check it out on your local machine
- put in a pr to have our changes merged back to the remote repo
:::

:::

::: {.column width="40%"}
![]( https://imgs.xkcd.com/comics/git_2x.png ){.absolute top=14.5% right=0 width=30%}

:::

::::

::: {.attribution}
[git](https://xkcd.com/1597/)
by [xkcd](https://xkcd.com)
used under [cc by-nc 2.5](https://creativecommons.org/licenses/by-nc/2.5/)
:::
## What is a Git repository?

::: {style="margin-top: 3em;"}
 - A place where you can store your code, your files, and each file's revision history.
 - Contains a `.git` folder at the root which does all the git magic behind the scenes.
:::

## Creating a git repository

- Navigate to a folder you want to work in, and create a new folder to contain your repository:

```bash
$ cd your_dir
$ mkdir intro-repo
$ cd intro-repo
```
Then initialise the folder
```bash
$ git init -b main
```
::: {.callout-tip title=".git"}
A hidden `.git` folder has been created in your folder. This contains everything Git needs to work.
:::

## What is a Git commit?
- You can think of a commit as a snapshot of your work at a particular time
- You can navigate between commits easily with git
- This allows you to switch easily between different versions of your work
- When you commit, rather than saving all the files in a project every time, git is efficient
and only stores the files which have been changed between the previous commit and your current one
- The commit also stores a reference to its parent commit

## Committing is a three part process:

::: {style="margin-top: 3em;"}
1. **Modify**: change the file in your working tree, i.e., go in and edit the file as usual
2. **Stage**: Tell git that you would like this file to be included in your next commit
3. **Commit**: Tell git to take a snapshot of the files you staged
:::

## At each step in the process, the file is stored in a different area:

![](images/show_different_file_states.png)

## Git States

`git` has four main states that your files can be in:

- **Untracked**: You've created a new file and not told git to keep track of it.
- **Modified**: You've changed a file that git already has a record of, but have not told
git to include these changes in your next commit.
We say these files are in the working tree.
- **Staged**: You've told git to include the file next time you do a commit.
We say these files are in the staging area.
- **Committed**: The file is saved in it's present state in the most recent commit.

## Create an untracked file:

![](images/create_untracked_file.png)

## Create an untracked file:

::: {style="margin-top: 3em;"}
Create a new file in your repository.

```bash
$ touch new.txt
$ vim new.txt
```
<br>
Lets check what git can see...

```bash
$ git status
```
:::

## `git status`

```bash
$ git status

On branch main

No commits yet

Untracked files:
   (use "git add <file>..." to include in what will be committed)

	new.txt

nothing added to commit but untracked files present (use "git add" to track)
```
::: {.callout-tip title="git status"}
Highlights your working branch -> `main`
<br> Reports commit status -> none yet
<br>Highlights untracked files -> `new.txt`
<br>Proposes adding these to git with `git add`
:::

## Add the untracked file to the staging area:

![](images/add_to_staging_area.png)

## `git add`

```bash
$ git status

On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

	new file:   new.txt
```

::: {.callout-tip title="git add"}
Moves file(s) into "Staging area" ready for commit
:::

## Committing your changes:

![](images/commit_to_repository.png)

## Committing your changes:


::: {style="margin-top: 3em;"}
Commit your file to the local git repo

```bash
$ git commit -m "Commit message"
```

- `git commit`:  tells git you want to commit
- `-m "Commit message"`: adds a human-readable description to the `log` of this commit. This is important as it tells you and others what the commit intent is.

::: {.callout-tip title="Writing meaningful commit message"}
There are many conventions and good practices to write good commit messages. Based on scope of the project and other factors particular conventions are chosen.
:::
:::

## Commit the staged file

::: {style="margin-top: 3em;"}
```bash
$ git commit -m "Created new.txt"

[main (root-commit) f22b25e] Created new.txt
 1 file changed, 1 insertion(+)
 create mode 100644 new.txt
```

```bash
$ git status

On branch main
nothing to commit, working tree clean
```
:::

## git log

```bash
$ git log

commit f22b25e3233b4645dabd0d81e651fe074bd8e73b
Author: Jane Doe <jmd123@cam.ac.uk>
Date:   Monday July 7 09:51:46 2025 -0400

    Create new.txt
```


::: {.callout-tip title="git log"}
Displays commits in reverse chronological order.

Includes full identifier, author and date
:::

- `git log --graph` shows the dependencies of commits in graph view
    - especially useful in non-linear development


